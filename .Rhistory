LineThickness = 0.5)
newggslopegraph(df, Year, GDP, Country,
Title = "GDP evolution",
SubTitle = "1970-1979",
Caption = "By R CHARTS",
LineThickness = 2.5)
cols <- c("Finland" = "gray", "Canada" = "gray",
"Italy" = "gray", "US" = "red",
"Greece" = "gray", "Switzerland" = "gray",
"Spain" = "green", "Japan" = "gray")
newggslopegraph(df, Year, GDP, Country,
Title = "GDP evolution",
SubTitle = "1970-1979",
Caption = "By R CHARTS",
LineColor = cols)
newggslopegraph(df, Year, GDP, Country,
Title = "GDP evolution",
SubTitle = "1970-1979",
Caption = "By R CHARTS",
DataLabelPadding = 0.2,
DataLabelLineSize = 0.5,
DataLabelFillColor = "lightblue")
# install.packages("ggthemes")
newggslopegraph(df, Year, GDP, Country,
Title = "GDP evolution",
SubTitle = "1970-1979",
Caption = "By R CHARTS",
ThemeChoice = "econ")
# install.packages("ggthemes")
newggslopegraph(df, Year, GDP, Country,
Title = "GDP evolution",
SubTitle = "1970-1979",
Caption = "By R CHARTS",
ThemeChoice = "wsj")
# Creating the data
SBB <- c("Mitte", "Nordost", "Ost", "Südost", "Süd", "Südwest", "West", "Alt-West", "Nordwest", "Nord")
Anzahl_eingereicht <- c(113, 77, 131, 81, 108, 133, 95, 121, 73, 109)
Anzahl_beschlossen <- c(55, 29, 51, 39, 59, 58, 54, 62, 39, 55)
Summe2021 <- c("50.000 €", "49.915 €", "49.293 €", "31.910 €", "49.990 €", "32.159 €", "50.000 €", "45.550 €", "41.391 €", "31.732 €")
Summe2022 <- c("49.577 €", "49.745 €", "43.395 €", "49.993 €", "46.400 €", "49.990 €", "44.415 €", "49.962 €", "27.349 €", "33.978 €")
Summe2023 <- c("50.000 €", "40.572 €", "32.250 €", "20.534 €", "50.000 €", "49.999 €", "41.563 €", "40.167 €", "37.731 €", "47.700 €")
# Creating the dataframe
SBBudget <- data.frame(SBB, Anzahl_eingereicht, Anzahl_beschlossen, Summe2021, Summe2022, Summe2023, stringsAsFactors = FALSE)
# Converting currency columns to numeric
SBBudget$Summe2021 <- as.numeric(gsub(" €", "", SBBudget$Summe2021))
SBBudget$Summe2022 <- as.numeric(gsub(" €", "", SBBudget$Summe2022))
SBBudget$Summe2023 <- as.numeric(gsub(" €", "", SBBudget$Summe2023))
# Displaying the dataframe
print(SBBudget)
df <- newgdp[16:30, ]
df
library(ggplot2)
# Assuming SBBudget dataframe has been created
SBBudget_long <- tidyr::pivot_longer(SBBudget, cols = starts_with("Summe"), names_to = "Year", values_to = "Summe")
ggplot(data = SBBudget_long,
aes(axis1 = SBB, axis2 = Year, y = Summe)) +
geom_alluvium(aes(fill = Year)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("SBB", "Year"),
expand = c(0.15, 0.05)) +
theme_void() +
theme(legend.position = "none")
library(ggalluvial)
vaccinations
library(ggplot2)
# Assuming SBBudget dataframe has been created
SBBudget_long <- tidyr::pivot_longer(SBBudget, cols = starts_with("Summe"), names_to = "Year", values_to = "Summe")
ggplot(data = SBBudget_long,
aes(axis1 = SBB, axis2 = Year, y = Summe)) +
geom_alluvium(aes(fill = Year)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("SBB", "Year"),
expand = c(0.15, 0.05)) +
theme_void() +
theme(legend.position = "none")
SBBudget_long
newggslopegraph(SBBudget_long, Year, Summe, SBB,
Title = "GDP evolution",
SubTitle = "1970-1979",
Caption = "By R CHARTS",
ThemeChoice = "wsj")
newggslopegraph(SBBudget_long, Year, Summe, SBB,
Title = "SBBudget 2021 - 2023",
SubTitle = "Summe je Stadtbezirk",
Caption = "By R CHARTS",
DataLabelPadding = 0.2,
DataLabelLineSize = 0.5,
DataLabelFillColor = "lightblue",
LineThickness = 2.5,
ThemeChoice = "wsj")
newggslopegraph(SBBudget_long, Year, Summe, SBB,
Title = "SBBudget 2021 - 2023",
SubTitle = "Summe je Stadtbezirk",
Caption = "By R CHARTS",
DataLabelPadding = 0.2,
DataLabelLineSize = 0.5,
DataLabelFillColor = "lightblue",
LineThickness = 2.5,
ThemeChoice = "wsj")
newggslopegraph(SBBudget_long, Year, Summe, SBB,
Title = "SBBudget 2021 - 2023",
SubTitle = "Summe je Stadtbezirk",
Caption = "By R CHARTS",
DataLabelPadding = 0.5,
DataLabelLineSize = 0.5,
DataLabelFillColor = "lightblue",
LineThickness = 2.5,
ThemeChoice = "wsj")
newggslopegraph(SBBudget_long, Year, Summe, SBB,
Title = "SBBudget 2021 - 2023",
SubTitle = "Summe je Stadtbezirk",
Caption = "By R CHARTS",
DataLabelPadding = 0.2,
DataLabelLineSize = 0.8,
DataLabelFillColor = "lightblue",
LineThickness = 2.5,
ThemeChoice = "wsj")
library(ggplot2)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
library(tidyr)
SBBudget_long_x <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
SBBudget_long_x <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Plotting the slope graph
ggplot(data = SBBudget_long_x, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
labs(title = "GDP evolution",
subtitle = "1970-1979",
caption = "By R CHARTS") +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
SBBudget_long_x <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Plotting the slope graph
ggplot(data = SBBudget_long_x, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
labs(title = "SBBudget 2021 - 2023",
subtitle = "Summe je Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme_minimal()
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
SBBudget_long_x <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.2, y = Summe),
hjust = 0, size = 3, color = "black") +
labs(title = "SBBudget 2021 - 2023",
subtitle = "Summe je Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme_minimal()
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
SBBudget_long_x <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.2, y = Summe),
hjust = 0, size = 3, color = "black") +
labs(title = "GDP evolution",
subtitle = "1970-1979",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme_minimal()
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.2, y = Summe),
hjust = 0, size = 3, color = "black") +
labs(title = "GDP evolution",
subtitle = "1970-1979",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.2, y = Summe),
hjust = 0, size = 3, color = "black") +
labs(title = "GDP evolution",
subtitle = "1970-1979",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme(legend.position = "none") +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.5, y = Summe),
hjust = 0, size = 3, color = "black") +
labs(title = "SBBudget 2021-2023",
subtitle = "Summe nach Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme(legend.position = "none") +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 1.5, y = Summe),
hjust = 0, size = 3, color = "black") +
labs(title = "SBBudget 2021-2023",
subtitle = "Summe nach Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme(legend.position = "none") +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.1, y = Summe),
hjust = 0, size = 3, color = "black") +
labs(title = "SBBudget 2021-2023",
subtitle = "Summe nach Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme(legend.position = "none") +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
labs(title = "SBBudget 2021-2023",
subtitle = "Summe nach Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme(legend.position = "none") +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.2, y = Summe),
hjust = 3, size = 3, color = "black") +
labs(title = "SBBudget 2021-2023",
subtitle = "Summe nach Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme(legend.position = "none") +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.2, y = Summe),
hjust = 5, size = 3, color = "black") +
labs(title = "SBBudget 2021-2023",
subtitle = "Summe nach Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme(legend.position = "none") +
theme_minimal() # Modify the theme as needed
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming SBBudget dataframe has been created
# Reshape the data to long format using tidyr
SBBudget_long <- SBBudget %>%
pivot_longer(cols = starts_with("Summe"), names_to = "Year", values_to = "Summe") %>%
mutate(Year = gsub("Summe", "", Year)) # Extracting the year
# Find the values for the first and last years for each SBB
label_data <- SBBudget_long %>%
group_by(SBB) %>%
filter(as.numeric(Year) %in% range(as.numeric(Year))) %>%
ungroup()
# Plotting the slope graph and adding labels
ggplot(data = SBBudget_long, aes(x = as.numeric(Year), y = Summe, group = SBB)) +
geom_line(aes(color = SBB), size = 1.2) +
geom_point(aes(color = SBB), size = 3) +
geom_text(data = subset(label_data, Year == min(Year)),
aes(label = SBB, x = as.numeric(Year) - 0.2, y = Summe),
hjust = 1, size = 3, color = "black") +
geom_text(data = subset(label_data, Year == max(Year)),
aes(label = SBB, x = as.numeric(Year) + 0.2, y = Summe),
hjust = 0, size = 3, color = "black") +
labs(title = "SBBudget 2021-2023",
subtitle = "Summe nach Stadtbezirk",
caption = "By R CHARTS") +
scale_x_continuous(breaks = as.numeric(c(2021, 2022, 2023)), labels = c("2021", "2022", "2023")) +
theme(legend.position = "none") +
theme_minimal() # Modify the theme as needed
install.packages("ggparliament")
library(ggparliament)
install.packages("tidyverse")
library(tidyverse)
# Install the openxlsx package (if not already installed)
install.packages("openxlsx")
# Load the openxlsx package
library(openxlsx)
stadtratswahlen <- read.xlsx("/Users/ulrike_imac_air/projects/Trial_and_error/data/Wahlen_Stadtratswahlen.xlsx", sheet = 1)
stadtratswahlen
# Data
ru <- election_data %>%
filter(country == "Russia" & year == 2016)
ru
stadtratswahlen_semi <- stadtratswahlen$seats_2019,
stadtratswahlen_semi <- stadtratswahlen$seats_2019,
# Assuming 'stadtratswahlen' is your dataset
stadtratswahlen_semi <- ggparliament(stadtratswahlen,
type = "semicircle",  # Parliament type
parl_rows = 7,        # Number of rows of the parliament
party_seats = "seats_2019")  # Column containing seat information per party
install.packages("ggparliament")
library(ggparliament)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
# install.packages("ggparliament")
library(ggparliament)
# install.packages("tidyverse")
library(tidyverse)
# Assuming 'stadtratswahlen' is your dataset
stadtratswahlen_semi <- ggparliament(stadtratswahlen,
type = "semicircle",  # Parliament type
parl_rows = 7,        # Number of rows of the parliament
party_seats = "seats_2019")  # Column containing seat information per party
library(ggparliament)
# Assuming 'stadtratswahlen' is your dataset
stadtratswahlen_semi <- ggparliament(stadtratswahlen,
type = "semicircle",  # Parliament type
parl_rows = 7,        # Number of rows of the parliament
party_seats = "seats_2019")  # Column containing seat information per party
